# ================ ya =================
import datetime
import bitmex
import time
import json

ya_key = ''
client = bitmex.bitmex(test=False, api_key=ya_key, api_secret=ya_secret)

al_key = ''
al_secret = ''
client = bitmex.bitmex(test=False, api_key=api_key, api_secret=api_secret)



def orders(qty1, qty2, qty3, qty4, qty5, qty6, qty7, qty8):
    try:
        book = client.OrderBook.OrderBook_getL2(symbol='XBTUSD', depth=1).result()
        ask = book[0][0].get('price')
        bid = book[0][1].get('price')
        try:
            order = [{'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + 2.5},
                     {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - 2.5},
                     {'symbol': 'XBTUSD', 'orderQty': -qty2, 'price': ask + 5},
                     {'symbol': 'XBTUSD', 'orderQty': qty2, 'price': bid - 5},
                     {'symbol': 'XBTUSD', 'orderQty': -qty3, 'price': ask + 10},
                     {'symbol': 'XBTUSD', 'orderQty': qty3, 'price': bid - 10},
                     {'symbol': 'XBTUSD', 'orderQty': -qty4, 'price': ask + 20},
                     {'symbol': 'XBTUSD', 'orderQty': qty4, 'price': bid - 20},
                     {'symbol': 'XBTUSD', 'orderQty': -qty5, 'price': ask + 40},
                     {'symbol': 'XBTUSD', 'orderQty': qty5, 'price': bid - 40},
                     {'symbol': 'XBTUSD', 'orderQty': -qty6, 'price': ask + 80},
                     {'symbol': 'XBTUSD', 'orderQty': qty6, 'price': bid - 80},
                     {'symbol': 'XBTUSD', 'orderQty': -qty7, 'price': ask + 120},
                     {'symbol': 'XBTUSD', 'orderQty': qty7, 'price': bid - 120},
                     {'symbol': 'XBTUSD', 'orderQty': -qty8, 'price': ask + 180},
                     {'symbol': 'XBTUSD', 'orderQty': qty8, 'price': bid - 180}]
            client.Order.Order_newBulk(orders=json.dumps(order)).result()
            print('<iai> Orders are placed')
        except Exception:
            pass
    except Exception:
        print(f'<iai> error <orders> {datetime.datetime.now()}')
        pass


def order_cancel(side):
    """
    :param side: сторона, в которую открыта основная сделка, противоположные ордера отменяются
    :return:
    """
    order_list = client.Order.Order_getOrders(symbol='XBTUSD', count=16, reverse=True).result()[0]
    short_list = []
    long_list = []
    if side == 'long':
        for order in order_list:
            if order.get('side') == 'Sell':
                try:
                    order_id = order.get('orderID')
                    short_list.append(order_id)
                    # client.Order.Order_cancel(orderID=order_id).result()
                except Exception:
                    pass
        client.Order.Order_cancel(orderID=json.dumps(short_list)).result()
    elif side == 'short':
        for order in order_list:
            if order.get('side') == 'Buy':
                try:
                    order_id = order.get('orderID')
                    long_list.append(order_id)
                    # client.Order.Order_cancel(orderID=order_id).result()
                except Exception:
                    pass
        client.Order.Order_cancel(orderID=json.dumps(long_list)).result()


def pos_check():
    while True:
        try:
            pos = client.Position.Position_get().result()
            op_cl = pos[0][0].get('isOpen')
            price = pos[0][0].get('avgEntryPrice')
            round_price = round(price, 0)
            qty = pos[0][0].get('currentQty')
            if op_cl:
                if qty > 0:
                    order_cancel('long')
                    try:
                        client.Order.Order_new(symbol='XBTUSD', orderQty=-qty, price=round_price + 1.5).result()
                        print(f'<iai> Long position is open at {datetime.datetime.now()}')
                        break
                    except Exception:
                        pass
                elif qty < 0:
                    order_cancel('short')
                    try:
                        client.Order.Order_new(symbol='XBTUSD', orderQty=-qty, price=round_price - 1.5).result()
                        print(f'<iai> Short position is open at {datetime.datetime.now()}')
                        break
                    except Exception:
                        pass
            elif op_cl is False:
                pass
            time.sleep(1.5)
        except Exception:
            print(f'<iai> error <pos_check> {datetime.datetime.now()}')


while True:
    orders(40, 80, 120, 160, 400, 800, 1600, 3200)
    pos_check()
    while True:
        try:
            pos = client.Position.Position_get().result()
            op_cl = pos[0][0].get('isOpen')
            price = pos[0][0].get('avgEntryPrice')
            round_price = round(price, 0)
            qty = pos[0][0].get('currentQty')
            if op_cl:
                open_order = client.Order.Order_getOrders(symbol='XBTUSD', count=16, reverse=True,
                                                          filter=json.dumps({'ordStatus': 'New'})).result()[0][0]
                close_qty = open_order.get('orderQty')
                order_id = open_order.get('orderID')
                if close_qty == qty:
                    pass
                elif close_qty < abs(qty):
                    if qty > 0:
                        try:
                            client.Order.Order_amend(orderID=order_id, orderQty=-qty, price=round_price + 1.5).result()
                        except Exception:
                            pass
                    elif qty < 0:
                        try:
                            client.Order.Order_amend(orderID=order_id, orderQty=-qty, price=round_price - 1.5).result()
                        except Exception:
                            pass
            elif op_cl is False:
                client.Order.Order_cancelAll().result()
                print(f'<iai> Position close at {datetime.datetime.now()}\n**********')
                # time.sleep(2)
                break
            time.sleep(1.5)
        except Exception:
            print(f'<iai> error <main loop> {datetime.datetime.now()}')

